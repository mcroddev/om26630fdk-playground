// SPDX-License-Identifier: MIT
//
// Copyright 2025 Michael Rodriguez
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the “Software”), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "types.h"
#include "util.h"

#define HAL_SYSCTL_CCLK_HZ (mhz_to_hz(96))
#define HAL_SYSCTL_XTAL_HZ (mhz_to_hz(12))
#define HAL_SYSCTL_IRC_HZ (mhz_to_hz(4))
#define HAL_SYSCTL_RTC_HZ (khz_to_hz(32))

enum hal_sysctl_reg {
	HAL_SYSCTL_REG_FLASHCFG = 0x400FC000,
	HAL_SYSCTL_REG_PLL0CON = 0x400FC080,
	HAL_SYSCTL_REG_PLL0CFG = 0x400FC084,
	HAL_SYSCTL_REG_PLL0STAT = 0x400FC088,
	HAL_SYSCTL_REG_PLL0FEED = 0x400FC08C,
	HAL_SYSCTL_REG_PCONP = 0x400FC0C4,
	HAL_SYSCTL_REG_CCLKCFG = 0x400FC104,
	HAL_SYSCTL_REG_USBCLKCFG = 0x400FC108,
	HAL_SYSCTL_REG_CLKSRCSEL = 0x400FC10C,
	HAL_SYSCTL_REG_SCS = 0x400FC1A0,
	HAL_SYSCTL_REG_PCLKSEL0 = 0x400FC1A8,
	HAL_SYSCTL_REG_PCLKSEL1 = 0x400FC1AC,
	HAL_SYSCTL_REG_CLKOUTCFG = 0x400FC1C8
};

enum hal_sysctl_pconp_bit {
	HAL_SYSCTL_PCONP_BIT_PCTIM0 = BIT_1,
	HAL_SYSCTL_PCONP_BIT_PCTIM1 = BIT_2,
	HAL_SYSCTL_PCONP_BIT_PCUART0 = BIT_3,
	HAL_SYSCTL_PCONP_BIT_PCUART1 = BIT_4,
	HAL_SYSCTL_PCONP_BIT_PCPWM1 = BIT_6,
	HAL_SYSCTL_PCONP_BIT_PCI2C0 = BIT_7,
	HAL_SYSCTL_PCONP_BIT_PCSPI = BIT_8,
	HAL_SYSCTL_PCONP_BIT_PCRTC = BIT_9,
	HAL_SYSCTL_PCONP_BIT_PCSSP1 = BIT_10,
	HAL_SYSCTL_PCONP_BIT_PCADC = BIT_12,
	HAL_SYSCTL_PCONP_BIT_PCCAN1 = BIT_13,
	HAL_SYSCTL_PCONP_BIT_PCCAN2 = BIT_14,
	HAL_SYSCTL_PCONP_BIT_PCGPIO = BIT_15,
	HAL_SYSCTL_PCONP_BIT_PCRIT = BIT_16,
	HAL_SYSCTL_PCONP_BIT_PCMCPWM = BIT_17,
	HAL_SYSCTL_PCONP_BIT_PCQEI = BIT_18,
	HAL_SYSCTL_PCONP_BIT_PCI2C1 = BIT_19,
	HAL_SYSCTL_PCONP_BIT_PCSSP0 = BIT_21,
	HAL_SYSCTL_PCONP_BIT_PCTIM2 = BIT_22,
	HAL_SYSCTL_PCONP_BIT_PCTIM3 = BIT_23,
	HAL_SYSCTL_PCONP_BIT_PCUART2 = BIT_24,
	HAL_SYSCTL_PCONP_BIT_PCUART3 = BIT_25,
	HAL_SYSCTL_PCONP_BIT_PCI2C2 = BIT_26,
	HAL_SYSCTL_PCONP_BIT_PCI2S = BIT_27,
	HAL_SYSCTL_PCONP_BIT_PCGPDMA = BIT_29,
	HAL_SYSCTL_PCONP_BIT_PCENET = BIT_30,
	HAL_SYSCTL_PCONP_BIT_PCUSB = BIT_31,
	HAL_SYSCTL_PCONP_BIT_ALL_MASK =
		HAL_SYSCTL_PCONP_BIT_PCTIM0 | HAL_SYSCTL_PCONP_BIT_PCTIM1 |
		HAL_SYSCTL_PCONP_BIT_PCUART0 | HAL_SYSCTL_PCONP_BIT_PCUART1 |
		HAL_SYSCTL_PCONP_BIT_PCPWM1 | HAL_SYSCTL_PCONP_BIT_PCI2C0 |
		HAL_SYSCTL_PCONP_BIT_PCSPI | HAL_SYSCTL_PCONP_BIT_PCRTC |
		HAL_SYSCTL_PCONP_BIT_PCSSP1 | HAL_SYSCTL_PCONP_BIT_PCADC |
		HAL_SYSCTL_PCONP_BIT_PCCAN1 | HAL_SYSCTL_PCONP_BIT_PCCAN2 |
		HAL_SYSCTL_PCONP_BIT_PCGPIO | HAL_SYSCTL_PCONP_BIT_PCRIT |
		HAL_SYSCTL_PCONP_BIT_PCMCPWM | HAL_SYSCTL_PCONP_BIT_PCQEI |
		HAL_SYSCTL_PCONP_BIT_PCI2C1 | HAL_SYSCTL_PCONP_BIT_PCSSP0 |
		HAL_SYSCTL_PCONP_BIT_PCTIM2 | HAL_SYSCTL_PCONP_BIT_PCTIM3 |
		HAL_SYSCTL_PCONP_BIT_PCUART2 | HAL_SYSCTL_PCONP_BIT_PCUART3 |
		HAL_SYSCTL_PCONP_BIT_PCI2C2 | HAL_SYSCTL_PCONP_BIT_PCI2S |
		HAL_SYSCTL_PCONP_BIT_PCGPDMA | HAL_SYSCTL_PCONP_BIT_PCENET |
		HAL_SYSCTL_PCONP_BIT_PCUSB
};

enum hal_sysctl_pclksel_clk {
	HAL_SYSCTL_PCLKSEL_CCLK_DIV_4,
	HAL_SYSCTL_PCLKSEL_CCLK_DIV_1,
	HAL_SYSCTL_PCLKSEL_CCLK_DIV_2,
	HAL_SYSCTL_PCLKSEL_CCLK_DIV_3
};

enum hal_sysctl_pclksel_mask {
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_WDT = BIT_0 | BIT_1,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_TIMER0 = BIT_2 | BIT_3,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_TIMER1 = BIT_4 | BIT_5,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_UART0 = BIT_6 | BIT_7,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_UART1 = BIT_8 | BIT_9,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_PWM1 = BIT_12 | BIT_13,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_I2C0 = BIT_14 | BIT_15,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_SPI = BIT_16 | BIT_17,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_SSP1 = BIT_20 | BIT_21,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_DAC = BIT_22 | BIT_23,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_ADC = BIT_24 | BIT_25,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_CAN1 = BIT_26 | BIT_27,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_CAN2 = BIT_28 | BIT_29,
	HAL_SYSCTL_PCLKSEL0_MASK_PCLK_ACF = BIT_30 | BIT_31,

	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_QEI = BIT_0 | BIT_1,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_GPIOINT = BIT_2 | BIT_3,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_PCB = BIT_4 | BIT_5,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_I2C1 = BIT_6 | BIT_7,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_SSP0 = BIT_10 | BIT_11,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_TIMER2 = BIT_12 | BIT_13,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_TIMER3 = BIT_14 | BIT_15,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_UART2 = BIT_16 | BIT_17,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_UART3 = BIT_18 | BIT_19,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_I2C2 = BIT_20 | BIT_21,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_I2S = BIT_22 | BIT_23,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_RIT = BIT_26 | BIT_27,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_SYSCON = BIT_28 | BIT_29,
	HAL_SYSCTL_PCLKSEL1_MASK_PCLK_MC = BIT_30 | BIT_31
};

enum hal_sysctl_flash_access_time {
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_1,
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_2,
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_3,
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_4,
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_5,
	HAL_SYSCTL_FLASH_ACCESS_TIME_CLK_6
};

enum hal_sysctl_osc_src {
	HAL_SYSCTL_OSC_IRC,
	HAL_SYSCTL_OSC_MAIN,
	HAL_SYSCTL_OSC_RTC,
	HAL_SYSCTL_OSC_NUM
};

enum hal_sysctl_main_osc_range {
	HAL_SYSCTL_MAIN_OSC_RANGE_1_TO_20_MHZ,
	HAL_SYSCTL_MAIN_OSC_RANGE_15_TO_25_MHZ
};

enum hal_sysctl_clkout_clk_src {
	HAL_SYSCTL_CLKOUT_CLK_SRC_CPU,
	HAL_SYSCTL_CLKOUT_CLK_SRC_MAIN,
	HAL_SYSCTL_CLKOUT_CLK_SRC_IRC,
	HAL_SYSCTL_CLKOUT_CLK_SRC_USB,
	HAL_SYSCTL_CLKOUT_CLK_SRC_RTC
};

enum hal_sysctl_clkout_clk_div {
	HAL_SYSCTL_CLKOUT_CLK_DIV_1,
	HAL_SYSCTL_CLKOUT_CLK_DIV_2,
	HAL_SYSCTL_CLKOUT_CLK_DIV_3,
	HAL_SYSCTL_CLKOUT_CLK_DIV_4,
	HAL_SYSCTL_CLKOUT_CLK_DIV_5,
	HAL_SYSCTL_CLKOUT_CLK_DIV_6,
	HAL_SYSCTL_CLKOUT_CLK_DIV_7,
	HAL_SYSCTL_CLKOUT_CLK_DIV_8,
	HAL_SYSCTL_CLKOUT_CLK_DIV_9,
	HAL_SYSCTL_CLKOUT_CLK_DIV_10,
	HAL_SYSCTL_CLKOUT_CLK_DIV_11,
	HAL_SYSCTL_CLKOUT_CLK_DIV_12,
	HAL_SYSCTL_CLKOUT_CLK_DIV_13,
	HAL_SYSCTL_CLKOUT_CLK_DIV_14,
	HAL_SYSCTL_CLKOUT_CLK_DIV_15,
	HAL_SYSCTL_CLKOUT_CLK_DIV_16
};

enum hal_sysctl_usbclk {
	HAL_SYSCTL_USBCLK_PLL0_DIV_6 = 5,
	HAL_SYSCTL_USBCLK_PLL0_DIV_8 = 7,
	HAL_SYSCTL_USBCLK_PLL0_DIV_10 = 9
};

struct hal_sysctl_pll_cfg {
	u32 pll_mul;
	u32 pll_div;
	u32 osc_src;
	u32 cclkcfg_div;
};

void hal_sysctl_peripheral_power_enable(enum hal_sysctl_pconp_bit mask);
void hal_sysctl_peripheral_power_disable(enum hal_sysctl_pconp_bit mask);

void hal_sysctl_clkout_cfg_set(enum hal_sysctl_clkout_clk_src clk_src,
			       enum hal_sysctl_clkout_clk_div clk_div);

void hal_sysctl_main_osc_enable(enum hal_sysctl_main_osc_range osc_range);
void hal_sysctl_cclk_cfg(const struct hal_sysctl_pll_cfg *cfg);

void hal_sysctl_flash_access_time_set(
	enum hal_sysctl_flash_access_time flash_access_time);